#!/bin/bash

# The network on which the containers will be built.
NETWORK="redis_toolkit"

# Builds the necessary containers.
monitor_install() {
    echo "Installing ..."
    echo "Building the report container ..."
    docker build -t $(whoami)/redis_toolkit_db db/
    echo "Building the injector container ..."
    docker build -t $(whoami)/redis_toolkit_injector injector/
    echo "Building the report container ..."
    docker build -t $(whoami)/redis_toolkit_report report/

    # Putting all containers on the same network.
    docker network rm $NETWORK 2>/dev/null
    docker network create $NETWORK
}

# Starts the db and injector containers charged with monitoring the remote Redis instance.
monitor_start() {
    echo -n "Please enter the redis-cli string for the Redis server you wish to monitor: "
    read redis_cli

    # Start db container.
    echo "Preparing the environment ..."
    if [ $( docker ps -a | grep redis_toolkit_db | wc -l ) -gt 0 ]; then
        echo "Stopping redis_toolkit_db container ..."
        stop_db=`docker stop redis_toolkit_db > /dev/null 2>&1`

        echo "Removing redis_toolkit_db container ..."
        docker rm redis_toolkit_db > /dev/null
    else
        echo "redis_toolkit_db container does not exist"
    fi

    docker run -it -d -p 6379:6379 --name redis_toolkit_db -v $(pwd)/db/data/:/var/lib/redis/ --network=$NETWORK $(whoami)/redis_toolkit_db
    if [ $( docker ps -a | grep redis_toolkit_db | wc -l ) -gt 0 ]; then
        echo "Successfully provisioned redis_toolkit_db!"
    else
        echo "Can't find redis_toolkit_db container."
    fi

    # Check if the local redis is available.
    while [ 1 ]; do
        pong=`redis-cli ping`
        if [ "$pong" = "PONG" ]; then
            echo "Redis is reacheable."
            break
        else
            echo "Redis is unreacheable."
            sleep 1
        fi
    done

    # Flush the previous data.
    redisflush=`redis-cli flushall`

    # Start injector container.
    if [ $( docker ps -a | grep redis_toolkit_injector | wc -l ) -gt 0 ]; then
        docker rm redis_toolkit_injector > /dev/null 2>&1
    else 
        echo "Can't find redis_toolkit_injector container."
        echo "Creating redis_toolkit_injector container."
    fi
    docker run -it -d --name redis_toolkit_injector --network=$NETWORK -e "REDIS_CLI=$redis_cli" $(whoami)/redis_toolkit_injector

    # Verify the existence of redis_toolkit_injector container.
    if [ $( docker ps -a | grep redis_toolkit_injector | wc -l ) -gt 0 ]; then
        echo "Successfully provisioned redis_toolkit_injector!"
    else
        echo "Can't find redis_toolkit_injector container."
    fi

    monitor_ps
}

# Stopping the db and injector containers.
monitor_stop() {
    echo "[1] Stop the injection service and keep the local database for reporting purposes."
    echo "[2] Stop the injection service and the local database. This will delete the collected data. Please make sure you have generated the report before you choose this option."
    echo -n "Please choose enter your choice [1|2]: "
    read answer

    case $answer in
        1)
            echo "Shutting down redis_toolkit_injector container."
            docker stop redis_toolkit_injector ;;
        2)
            echo "Shutting down redis_toolkit_injector and redis_toolkit_db containers."
            docker stop redis_toolkit_injector redis_toolkit_db ;;
        *)
            echo "Option not recognized." ;;
    esac

}

# Show containers in this network namespace.
monitor_ps() {
    docker ps -f "network=$NETWORK"
}

# Clean up function.
monitor_cleanup() {
    echo -n "Please confirm that you wish to delete the containers from your computer [Y/n]: "
    read answer

    case $answer in
        Y|y|Yes|yes)
            echo "Deleting the containers ..."
            docker rm redis_toolkit_db redis_toolkit_injector redis_toolkit_report
            echo "Deleting the images ..."
            docker rmi $(whoami)/redis_toolkit_db $(whoami)/redis_toolkit_injector $(whoami)/redis_toolkit_report
            echo "All cleaned up." ;;
        N|n|No|no)
            # Continuing the process.
            ;;
        *)
            echo "Option not recognized." ;;
    esac
}

# Running the monitor report.
report() {
    # First argument is irrelevant.
    shift
    docker rm redis_toolkit_report > /dev/null 2>&1
    docker run -it --name redis_toolkit_report --network=$NETWORK -v $(pwd)/report/app/data/:/go/src/app/data/ $(whoami)/redis_toolkit_report ./main $@
}

# Running the report.
memory_dump() {
    echo -n "Please enter the redis-cli string for the Redis server you wish to analyze: "
    read redis_cli

    # Stop redis first
    echo "Preparing to dump the Redis database locally ..."
    stop_db=`docker stop redis_toolkit_db > /dev/null 2>&1`
    sleep 5

    # Dump the remote redis db locally.
    $redis_cli --rdb db/data/dump.rdb

    # Start db container (kill any previous instance).
    docker rm redis_toolkit_db > /dev/null 2>&1
    docker run -it -d -p 6379:6379 --name redis_toolkit_db -v $(pwd)/db/data/:/var/lib/redis/ --network=$NETWORK $(whoami)/redis_toolkit_db

    # Check if the local redis is available.
    while [ 1 ]; do
        pong=`redis-cli ping`
        if [ "$pong" = "PONG" ]; then
            break
        else
            sleep 1
        fi
    done

    echo "Dump completed."
}

# Reset the setup.
reset_setup() {
    monitor_stop
    monitor_cleanup
    monitor_install
}

################################
##### Script starts here #######
################################

if [ $# -eq 0 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
    echo "usage: redis-toolkit [-h] commands

Toolkit for actively monitoring, analyzing and reporting your Redis database.

Commands:
    install             Installs the tools and libraries needed for monitoring the remote server. Don't worry, it's all containers which you can clean up later.
    update              Updates the installation.
    cleanup             Cleans up the installation.
    ps                  Show the running containers under this network.
    monitor             Actively monitors a redis database using the redis-cli monitor command (https://redis.io/commands/monitor) and injects data into a local Redis instance which will be used for reporting purposes.
    stop                Stops the monitoring with/without deleting the local data.
    dump                Dumps the remote database into the local one for safer data crunching.
    reset               Reset the instance.
    report              Runs either the Hit Rate or Memory distribution report on the local data gather by the monitoring process."

    exit 0
fi

# Check if docker is installed and running.
docker --version >/dev/null 2>&1 || { echo >&2 "It looks like you don't have docker installed. Please visit this url to download & install it: https://www.docker.com/"; exit 1; }

case "$1" in
    install|update)
        monitor_install ;;
    cleanup)
        monitor_cleanup ;;
    ps)
        monitor_ps ;;
    monitor)
        monitor_start ;;
    stop)
        monitor_stop ;;
    dump)
        memory_dump;;
    reset)
        reset_setup;;
    report)
        report $@;;
    --) ;;
    *) echo "redis-toolkit $1 is not a recognized option" ;;
esac
